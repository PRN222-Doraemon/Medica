@model CourseVM
@using Core.Constants

<div class="card mt-5">
    <div class="card-body">
        <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4 border-bottom">
            <div class="container">
                <ul class="navbar-nav ms-autm">
                    <li class="nav-item border-right">
                        <a class="btn nav-link active">Reviews</a>
                    </li>
                    <li class="nav-item">
                        <a class="btn nav-link active">Q&A</a>
                    </li>
                </ul>
            </div>
        </nav>
        <!-- Reviews -->
        <div class="d-flex align-items-center gap-2 mb-4">
            <i class="bi bi-star-fill text-warning fs-4"></i>
            <h4 class="mb-0">@($"{Model.Rates} course rating")</h4>
            <span class="text-muted">(@Model.Reviews ratings)</span>
        </div>

        <div class="row" id="reviewsContainer">
            @foreach (var review in Model.Feedbacks.Select((r, i) => new { Review = r, Index = i }))
            {
                <div class="col-md-6 review-item @(review.Index >= 4 ? "d-none" : "")">
                    <div class="border-top py-4 h-100">
                        <div class="d-flex gap-3">
                            <div class="rounded-circle bg-dark-subtle text-white d-flex align-items-center justify-content-center"
                                style="width: 45px; height: 45px;">
                                <span class="fw-semibold">@review.Review.StudentName.Substring(0, 2).ToUpper()</span>
                            </div>

                            <div>
                                <div class="d-flex align-items-center gap-2 mb-1">
                                    <span class="fw-semibold">@review.Review.StudentName</span>
                                    <div class="text-warning">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <i class="bi bi-star-@(i <= review.Review.Rating ? "fill" : "")"></i>
                                        }
                                    </div>
                                </div>
                                <div class="text-muted small">@review.Review.UpdatedAt</div>
                                <p class="mb-3 small">@review.Review.FeedbackContent</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Nút xem thêm -->
        @if (Model.Feedbacks.Count() > 4)
        {
            <div class="text-center mt-3">
                <button class="btn btn-green-outline" id="showMoreBtn">See more</button>
                <button class="btn btn-green-outline d-none" id="seeLessBtn">See less</button>
            </div>
        }
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let showMoreBtn = document.getElementById("showMoreBtn");
        let seeLessBtn = document.getElementById("seeLessBtn");

        if (showMoreBtn && seeLessBtn) {
            showMoreBtn.addEventListener("click", function () {
                document.querySelectorAll(".review-item.d-none").forEach(item => {
                    item.classList.remove("d-none");
                });
                showMoreBtn.classList.add("d-none");
                seeLessBtn.classList.remove("d-none");
            });

            seeLessBtn.addEventListener("click", function () {
                document.querySelectorAll(".review-item").forEach((item, index) => {
                    if (index >= 4) {
                        item.classList.add("d-none");
                    }
                });
                seeLessBtn.classList.add("d-none");
                showMoreBtn.classList.remove("d-none");
            });
        }
    });
</script>
